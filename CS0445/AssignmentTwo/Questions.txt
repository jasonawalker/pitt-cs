Jason Walker - Assignment 2 Questions
1) Array implementation is faster.
2) Array implementation is faster. 
3) Array implementation is faster. 
4) Linked implementation is faster sometimes and Array implementation is faster other times. Sometimes they are so within a few 1000 ns of each other.
5) Since both the array and linked implementation are O(1) operations when accessing an element on the top of the stack, the only difference between the two are how the data is handled. For 1-4, I would expect the array implementation to be quicker for small and large amounts of pushes because when pushing a new value into the linked stack, a new node object need to be created overtime and that takes time. The only time we need to worry about something other than just pushing a new item into the array is when the capacity runs out and we need to copy the array over. For both small and large amounts of pops, the array implementation still is faster, but the times do not seem do differ much from each other â€” meaning their times are very similar. They seem so to be pretty close to the same speed which was not surprising because it is just a matter of accessing the data at the top of the stack which is O(1) for both cases.
6) Like mentioned before, since pushing and popping from the stack is an O(1) operation, there are a few tradeoff that do not come from algorithm complexity. For a linked list implementation, you are trading not having to resize your stack and using exactly how much memory is needed, for expensive add functions because you need to create a Node object every time. For the array implementation, you are trading memory efficiency (only having to use 4 bytes for object references per space in the array), for having to deal with resizing the array when the capacity is reached.