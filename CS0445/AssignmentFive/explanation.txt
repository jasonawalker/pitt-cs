1)Every object is completely unique. We implement hashCode on individual objects because otherwise it would require complicated logic and generalization that would make for bad hashCode. In terms of the hash table, its purpose is to receive a key and put things into it based on that key. It is basically blind to the type of object that is being mapped into it. 

2)Yes you can. Although it somewhat depends. When your program is serialized, transient variables are not included in that serialization process. Therefore if you hash the data on one computer, and then hash it on another computer through the file that was serialized=, you have the possibility to receive different hash codes because the data itself is different. However a solution to this is to do what is done in DataReading.java and include a timestamp of creation. Even though there are some problems with this as well, it is a good way to get a constant counter over the entire object that will remain static.

3) Yes, having a limit on the amount of combinations of values does not restrict us from making a hash code. We can still make unique and repeatable hash codes just as if the data had infinite combinations. The only issue is that we would have to make sure that the hash code is well distributed and not clustered on one end of the table because the data possibilities are so small.